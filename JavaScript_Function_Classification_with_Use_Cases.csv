Function,Type,Reason,Syntax,Example,Use Case
map,Higher-Order,Takes a function as an argument to transform each element,array.map(callbackFn),"[1, 2, 3].map(x => x * 2) // [2, 4, 6]",Use when you want to transform each element in an array.
filter,Higher-Order,Takes a function as an argument to filter elements,array.filter(callbackFn),"[1, 2, 3, 4].filter(x => x % 2 === 0) // [2, 4]",Use to filter out elements based on a condition.
reduce,Higher-Order,Takes a function as an argument to accumulate values,"array.reduce(callbackFn, initialValue)","[1, 2, 3, 4].reduce((a, b) => a + b, 0) // 10","Use to accumulate values into a single result (e.g., sum, product)."
forEach,Higher-Order,Takes a function as an argument to perform side-effects on each element,array.forEach(callbackFn),"[1, 2, 3].forEach(x => console.log(x)) // Logs 1, 2, 3","Use to perform an action on each element (e.g., logging), without returning a new array."
find,Higher-Order,Takes a function as an argument to find the first matching element,array.find(callbackFn),"[1, 2, 3, 4].find(x => x > 2) // 3",Use to find the first element that meets a specific condition.
findIndex,Higher-Order,Takes a function as an argument to find the index of the first matching element,array.findIndex(callbackFn),"[1, 2, 3, 4].findIndex(x => x > 2) // 2",Use to find the index of the first element that meets a specific condition.
every,Higher-Order,Takes a function as an argument to test all elements,array.every(callbackFn),"[2, 4, 6].every(x => x % 2 === 0) // true",Use to check if all elements satisfy a condition.
some,Higher-Order,Takes a function as an argument to test if any element meets criteria,array.some(callbackFn),"[1, 3, 5, 6].some(x => x % 2 === 0) // true",Use to check if any element in an array satisfies a condition.
sort,Higher-Order,Can take a comparator function as an argument to specify sorting order,array.sort([compareFn]),"[3, 1, 4].sort((a, b) => a - b) // [1, 3, 4]","Use to sort elements in a custom order, often numerically or alphabetically."
flatMap,Higher-Order,Takes a function to transform elements and then flattens the result,array.flatMap(callbackFn),"[1, 2, 3].flatMap(x => [x, x * 2]) // [1, 2, 2, 4, 3, 6]",Use to transform elements and then flatten the result into a single array.
bind,Higher-Order,Returns a new function with `this` bound to specified object,"function.bind(thisArg, ...args)","const boundFunc = func.bind(obj, 'arg1'); boundFunc()","Use to create a new function with `this` bound to a specific context, especially for event handlers."
call,Higher-Order,Calls a function with specified `this` and arguments (in list format),"function.call(thisArg, ...args)","func.call(obj, 'arg1', 'arg2')",Use to immediately invoke a function with a specific `this` context and arguments.
apply,Higher-Order,Calls a function with specified `this` and arguments (in array format),"function.apply(thisArg, [argsArray])","func.apply(obj, ['arg1', 'arg2'])",Use to immediately invoke a function with a specific `this` context and arguments in an array format.
reverse,Non-Higher-Order,Does not take a function as an argument or return a function,array.reverse(),"[1, 2, 3].reverse() // [3, 2, 1]",Use to reverse the order of elements in an array.
push,Non-Higher-Order,Does not take a function as an argument or return a function,"array.push(element1, ..., elementN)","[1, 2, 3].push(4) // [1, 2, 3, 4]",Use to add one or more elements to the end of an array.
pop,Non-Higher-Order,Does not take a function as an argument or return a function,array.pop(),"[1, 2, 3].pop() // [1, 2]",Use to remove the last element from an array.
shift,Non-Higher-Order,Does not take a function as an argument or return a function,array.shift(),"[1, 2, 3].shift() // [2, 3]",Use to remove the first element from an array.
unshift,Non-Higher-Order,Does not take a function as an argument or return a function,"array.unshift(element1, ..., elementN)","[1, 2, 3].unshift(0) // [0, 1, 2, 3]",Use to add one or more elements to the beginning of an array.
concat,Non-Higher-Order,Does not take a function as an argument or return a function,"array.concat(array1, ..., arrayN)","[1, 2].concat([3, 4]) // [1, 2, 3, 4]",Use to combine two or more arrays into a new array.
slice,Non-Higher-Order,Does not take a function as an argument or return a function,"array.slice([begin[, end]])","[1, 2, 3].slice(0, 2) // [1, 2]",Use to extract a section of an array as a new array without modifying the original.